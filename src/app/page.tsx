'use client';

import React, { useEffect, useState } from 'react';
import { renderToStaticMarkup } from 'react-dom/server';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { useMarkdownStore, getDraftTitle } from '@/store/useMarkdownStore';
import { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';
import DraftSidebar from '@/components/DraftSidebar';
import EditorPane from '@/components/EditorPane';
import PreviewPane from '@/components/PreviewPane';
import Header from '@/components/Header';
import EmptyState from '@/components/EmptyState';

export default function HomePage() {
  const {
    getActiveDraft,
    updateActiveDraftContent,
    createDraft,
    updateActiveDraftTitle,
  } = useMarkdownStore();

  const activeDraft = getActiveDraft();
  const [isMounted, setIsMounted] = useState(false);
  const [shareLinkStatus, setShareLinkStatus] = useState<null | 'copied' | 'failed'>(null);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  useEffect(() => {
    if (activeDraft && activeDraft.content) {
      const newTitle = getDraftTitle(activeDraft.content);
      if (newTitle !== activeDraft.title) {
         const oldTitleLooksAutoGenerated = activeDraft.title === 'Untitled Draft' || 
                                          activeDraft.title.startsWith('#') || 
                                          activeDraft.title === 'Untitled';
         if(oldTitleLooksAutoGenerated || newTitle !== 'Untitled'){
            updateActiveDraftTitle(activeDraft.id, newTitle);
         }
      }
    }
  }, [activeDraft?.content, activeDraft?.id, activeDraft?.title, updateActiveDraftTitle]);

  const handleMarkdownChange = (newContent: string) => {
    updateActiveDraftContent(newContent);
  };

  const handleExportMarkdown = () => {
    if (!activeDraft) return;

    const filename = `${activeDraft.title.replace(/[^a-z0-9]/gi, '_').toLowerCase() || 'untitled'}.md`;
    const blob = new Blob([activeDraft.content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleExportHtml = () => {
    if (!activeDraft) return;

    const htmlContent = renderToStaticMarkup(
      React.createElement(ReactMarkdown, { remarkPlugins: [remarkGfm] }, activeDraft.content || '')
    );

    const filename = `${activeDraft.title.replace(/[^a-z0-9]/gi, '_').toLowerCase() || 'untitled'}.html`;
    const blob = new Blob([`<!DOCTYPE html>\n<html><head><meta charset="utf-8"><title>${activeDraft.title}</title></head><body>${htmlContent}</body></html>`], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleCopyRichText = async () => {
    if (!activeDraft) return;

    const htmlContent = renderToStaticMarkup(
      React.createElement(ReactMarkdown, { remarkPlugins: [remarkGfm] }, activeDraft.content || '')
    );

    try {
      const blob = new Blob([htmlContent], { type: 'text/html' });
      const clipboardItem = new ClipboardItem({ 'text/html': blob });
      await navigator.clipboard.write([clipboardItem]);
      console.log('Rich text copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy rich text: ', err);
      try {
        await navigator.clipboard.writeText(activeDraft.content);
        console.log('Fallback: Plain text copied to clipboard.');
      } catch (fallbackErr) {
        console.error('Fallback failed: ', fallbackErr);
        alert('Failed to copy text. Your browser might not support this feature or permissions might be denied.');
      }
    }
  };

  const handleShareViaLink = async () => {
    if (!activeDraft || !activeDraft.content.trim()) {
      alert('Cannot share an empty draft.');
      return;
    }

    try {
      const response = await fetch('/api/share', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ content: activeDraft.content }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        throw new Error(errorData?.error || `Failed to create share: ${response.statusText}`);
      }

      const { id } = await response.json();
      const shareUrl = `${window.location.origin}/view/${id}`;

      await navigator.clipboard.writeText(shareUrl);
      setShareLinkStatus('copied');

    } catch (error) {
      console.error('Error sharing link:', error);
      setShareLinkStatus('failed');
    }
  };

  if (!isMounted) {
    return (
      <div className="flex h-screen bg-background-light">
        <div className="w-72 h-full bg-background-dark border-r border-slate-300 flex flex-col flex-shrink-0 animate-pulse">
          <div className="p-3 border-b border-slate-300 h-[57px] flex items-center">
            <div className="h-4 bg-secondary-light rounded w-1/2"></div>
          </div>
          <div className="flex-1 overflow-y-auto p-1.5 space-y-0.5">
            {[...Array(8)].map((_, i) => (
              <div key={i} className="h-8 bg-secondary-light rounded-md"></div>
            ))}
          </div>
          <div className="p-2 border-t border-slate-300 h-[37px] flex items-center justify-center">
            <div className="h-3 bg-secondary-light rounded w-1/3"></div>
          </div>
        </div>
        <main className="flex-1 flex flex-col overflow-hidden animate-pulse">
          <div className="p-3 border-b bg-surface border-slate-200 h-[57px] flex justify-start items-center">
            <div className="h-5 bg-secondary-light rounded w-1/3"></div>
          </div>
          <div className="flex flex-1 overflow-hidden bg-background p-3 sm:p-4 gap-3 sm:gap-4">
            <div className="w-1/2 h-full bg-surface rounded-md border border-slate-300 shadow-sm p-6">
              <div className="space-y-4">
                <div className="h-4 bg-secondary-light rounded w-3/4"></div>
                <div className="h-4 bg-secondary-light rounded w-full"></div>
                <div className="h-4 bg-secondary-light rounded w-5/6"></div>
              </div>
            </div>
            <div className="w-1/2 h-full bg-surface rounded-md border border-slate-300 shadow-sm p-6">
              <div className="space-y-4">
                <div className="h-4 bg-secondary-light rounded w-3/4"></div>
                <div className="h-4 bg-secondary-light rounded w-full"></div>
                <div className="h-4 bg-secondary-light rounded w-5/6"></div>
              </div>
            </div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="flex h-screen selection:bg-primary selection:text-white">
      <DraftSidebar />
      <main className="flex-1 flex flex-col overflow-hidden">
        {!activeDraft ? (
          <EmptyState onCreateDraft={createDraft} />
        ) : (
          <>
            <Header
              title={activeDraft.title}
              onExportMarkdown={handleExportMarkdown}
              onExportHtml={handleExportHtml}
              onCopyRichText={handleCopyRichText}
              onShareViaLink={handleShareViaLink}
              shareLinkStatus={shareLinkStatus}
            />
            <div className="flex flex-1 overflow-hidden bg-background p-2 sm:p-3 gap-2 sm:gap-3">
              <PanelGroup direction="horizontal">
                <Panel defaultSize={50} minSize={30}>
                  <EditorPane
                    content={activeDraft.content}
                    onChange={handleMarkdownChange}
                    draftId={activeDraft.id}
                  />
                </Panel>

                <PanelResizeHandle className="w-2 bg-background-light hover:bg-background-dark transition-colors duration-150 rounded-sm" />

                <Panel defaultSize={50} minSize={30}>
                  <PreviewPane content={activeDraft.content} />
                </Panel>
              </PanelGroup>
            </div>
          </>
        )}
      </main>
    </div>
  );
}

